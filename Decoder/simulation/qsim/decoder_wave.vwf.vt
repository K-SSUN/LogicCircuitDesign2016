// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2016 14:05:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder3_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder3_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN;
reg INA;
reg INB;
reg INC;
// wires                                               
wire OUTA;
wire OUTB;
wire OUTC;
wire OUTD;
wire OUTE;
wire OUTF;
wire OUTG;
wire OUTH;

// assign statements (if any)                          
decoder3_8 i1 (
// port map - connection between master ports and signals/registers   
	.EN(EN),
	.INA(INA),
	.INB(INB),
	.INC(INC),
	.OUTA(OUTA),
	.OUTB(OUTB),
	.OUTC(OUTC),
	.OUTD(OUTD),
	.OUTE(OUTE),
	.OUTF(OUTF),
	.OUTG(OUTG),
	.OUTH(OUTH)
);
initial 
begin 
#1000000 $finish;
end 

// EN
initial
begin
	EN = 1'b0;
	EN = #320000 1'b1;
	EN = #320000 1'b0;
end 

// INA
initial
begin
	INA = 1'b0;
	INA = #160000 1'b1;
	INA = #160000 1'b0;
	INA = #160000 1'b1;
	INA = #160000 1'b0;
end 

// INB
initial
begin
	INB = 1'b0;
	INB = #80000 1'b1;
	INB = #80000 1'b0;
	INB = #80000 1'b1;
	INB = #80000 1'b0;
	INB = #80000 1'b1;
	INB = #80000 1'b0;
	INB = #80000 1'b1;
	INB = #80000 1'b0;
end 

// INC
initial
begin
	INC = 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
	INC = #40000 1'b1;
	INC = #40000 1'b0;
end 
endmodule

